name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: petprojects_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, dom, fileinfo, mysql, xml, curl, zip, bcmath
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Composer Dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Install NPM Dependencies
        run: npm ci

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Run PHP Code Style Check
        run: composer lint

      - name: Run Static Analysis
        run: composer stan

      - name: Run Tests
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: petprojects_test
          DB_USERNAME: root
          DB_PASSWORD: password
        run: php artisan test

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, dom, fileinfo, mysql, xml, curl, zip, bcmath

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Composer Dependencies
        run: composer install --prefer-dist --no-interaction --no-progress --no-dev --optimize-autoloader

      - name: Install NPM Dependencies
        run: npm ci

      - name: Build Frontend Assets
        run: npm run build

      - name: Create Artifact
        run: |
          mkdir -p artifact
          tar -czf artifact/app.tar.gz \
            --exclude=".git" \
            --exclude=".github" \
            --exclude="node_modules" \
            --exclude="tests" \
            --exclude="artifact" \
            .

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: artifact/app.tar.gz
          retention-days: 1

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: ./

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Host Key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          APP_PATH: ${{ secrets.APP_PATH }}
        run: |
          scp app.tar.gz $SERVER_USER@$SERVER_HOST:$APP_PATH/app.tar.gz
          ssh $SERVER_USER@$SERVER_HOST "cd $APP_PATH && \
            tar -xzf app.tar.gz && \
            rm app.tar.gz && \
            php artisan migrate --force && \
            php artisan optimize:clear && \
            php artisan optimize && \
            php artisan queue:restart"

      - name: Send Deployment Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Deployment Status
          SLACK_MESSAGE: 'Application deployed to production ${{ job.status == ''success'' && ''successfully'' || ''with errors'' }}'
